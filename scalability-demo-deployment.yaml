# =================================================================
#  Headless Service for Peer Discovery
#  - Creates stable DNS records for each pod in the StatefulSet.
#  - Examples: dist-msg-queue-0.dist-msg-queue-peers, dist-msg-queue-1.dist-msg-queue-peers
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: dist-msg-queue-peers
  labels:
    app: dist-msg-queue
spec:
  ports:
    - name: grpc-internal # Port for ourr inter-node communication
      port: 8081
      targetPort: 8081
    - name: raft # For Raft
      port: 9999
      targetPort: 9999
  clusterIP: None # Headless Service
  selector:
    app: dist-msg-queue

---
# =================================================================
#  Client-Facing Service for Producers/Consumers (single entry point)
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: dist-msg-queue-client
  labels:
    app: dist-msg-queue
spec:
  type: NodePort
  ports:
    - name: grpc-client
      port: 8080
      targetPort: 8080
  selector:
    app: dist-msg-queue

---
# =================================================================
#  StatefulSet for the Key-Value Store Nodes
# =================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dist-msg-queue
spec:
  selector:
    matchLabels:
      app: dist-msg-queue
  serviceName: "dist-msg-queue-peers"
  replicas: 9 # Number of Nodes
  template:
    metadata:
      labels:
        app: dist-msg-queue
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: scalability-demo
          image: ghcr.io/chris-1187/scalability-demo:latest
          # image: scalability-demo:latest # For local setup
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
          #imagePullPolicy: Never # Just for local setup
          ports:
            - containerPort: 8080
              name: grpc-client
            - containerPort: 8081
              name: grpc-internal
            - containerPort: 9999  # Also Raft
              name: raft
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PEER_SERVICE_NAME
              value: "dist-msg-queue-peers"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REPLICA_COUNT
              value: "9" # Number of Nodes
            - name: RAFT_STORAGE_BASE_PATH
              value: "/var/data/dist-msg-queue"
          volumeMounts:
            - name: data-storage
              mountPath: /var/data/dist-msg-queue # Mount the persistent volume here
          # readinessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
          #   initialDelaySeconds: 15
          # livenessProbe:
          #   exec:
          #     command: ["/bin/grpc_health_probe", "-addr=:8080"]
          #   initialDelaySeconds: 30
  # =================================================================
  #  Volume Claim Template
  #  - Creates a PersistentVolumeClaim for each pod.
  # =================================================================
  volumeClaimTemplates:
    - metadata:
        name: data-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi # For each Node

---
# =================================================================
#  Vertical Pod Autoscaler for the StatefulSet
# =================================================================
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: dist-msg-queue-vpa
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind: StatefulSet
    name: dist-msg-queue
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: scalability-demo
        minAllowed:
          cpu: "125m"
          memory: "256Mi"
        maxAllowed:
          cpu: "125m"
          memory: "512Mi"
        controlledResources: ["cpu", "memory"]

